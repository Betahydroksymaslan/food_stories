{"version":3,"sources":["components/pages/App/App.style.js","assets/styles/theme.js","assets/styles/GlobalStyle.js","components/pages/App/App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","theme","colors","mainColor","white","mainColorLight","green","red","active","black","success","error","warning","fontSize","headers","xl","l","m","s","xs","boxShadow","mainShadow","media","phone","tablet","desktop","GlobalStyle","createGlobalStyle","normalize","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"0KAEaA,EAAUC,UAAOC,IAAV,sDACE,qBAAGC,MAAkBC,OAAOC,aCHrCF,EAAQ,CACjBC,OAAQ,CACNE,MAAO,UACPD,UAAW,UACXE,eAAgB,UAChBC,MAAO,UACPC,IAAK,UACLC,OAAQ,UACRC,MAAO,UACPC,QAAS,UACTC,MAAO,UACPC,QAAS,WAEXC,SAAU,CACRC,QAAS,OACTC,GAAI,OACJC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,GAAI,QAENC,UAAW,CACTC,WAAY,gCAEdC,MAAO,CACLC,MAAO,4BACPC,OAAQ,4BACRC,QAAS,8B,QCvBFC,EAAcC,4BAAH,4mBACpBC,a,OCUWC,MATf,WACE,OACE,eAAC,gBAAD,CAAe5B,MAAOA,EAAtB,UACE,cAACyB,EAAD,IACA,cAAC5B,EAAD,CAASgC,UAAU,MAAnB,sBCEAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAC5C,GACNwC,QAAQxC,MAAM,4CAA6CA,MC9FjE,IAYe6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFUnB,SAAkB7B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI6B,IAAIC,gBAAwBrC,OAAOC,SAASqC,MACpDC,SAAWvC,OAAOC,SAASsC,OAIvC,OAGFvC,OAAOwC,iBAAiB,QAAQ,WAC9B,IAAMnC,EAAK,UAAMgC,gBAAN,sBAEPvC,IAgEV,SAAiCO,EAAOC,GAEtCmC,MAAMpC,EAAO,CACXxB,QAAS,CAAE,iBAAkB,YAE5B6B,MAAK,SAACgC,GAEL,IAAMC,EAAcD,EAAS7D,QAAQ+D,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMrC,MAAK,SAACC,GAClCA,EAAaqC,aAAatC,MAAK,WAC7BV,OAAOC,SAASgD,eAKpB7C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFV+B,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMrC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OEhC/B6C,GAKA5B,M","file":"static/js/main.2b4a8b80.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.mainColor};\r\n`;\r\n","export const theme = {\r\n    colors: {\r\n      white: '#FFFFFF',\r\n      mainColor: '#F0F0F4',\r\n      mainColorLight: '#353766',\r\n      green: '#69AB56',\r\n      red: '#C4686F',\r\n      active: '#17D1E0',\r\n      black: '#111111',\r\n      success: '#8FCB81',\r\n      error: '#CB8581',\r\n      warning: '#E1D888',\r\n    },\r\n    fontSize: {\r\n      headers: '40px',\r\n      xl: '30px',\r\n      l: '25px',\r\n      m: '22px',\r\n      s: '18px',\r\n      xs: '14px',\r\n    },\r\n    boxShadow: {\r\n      mainShadow: '0 4px 5px 0 rgba(0,0,0,0.25)'\r\n    },\r\n    media: {\r\n      phone: '@media (max-width: 600px)',\r\n      tablet: '@media (min-width: 601px)',\r\n      desktop: '@media (min-width: 992px)',\r\n    },\r\n  };","import { createGlobalStyle } from 'styled-components';\r\nimport { normalize } from 'styled-normalize';\r\n\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  ${normalize}\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n  *, *::after, *::before {\r\n    box-sizing: inherit;\r\n  }\r\n  body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n  a, button {\r\n    font-family: 'Montserrat', sans-serif;\r\n    text-decoration: none;\r\n    user-select: none;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    -webkit-tap-highlight-color: transparent;\r\n  }\r\n  h1 {\r\n    font-size: 30px;\r\n    font-weight: 400;\r\n    margin: 0;\r\n  }\r\n`;\r\n","import React from \"react\";\nimport { Wrapper } from \"./App.style\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"assets/styles/theme\";\nimport { GlobalStyle } from \"assets/styles/GlobalStyle\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Wrapper className=\"App\">APKA</Wrapper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/pages/App/App';\nimport * as serviceWorkerRegistration from 'serviceWorkerRegistration';\nimport reportWebVitals from 'reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}